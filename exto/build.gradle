apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

ext {
    bintrayRepo = 'general'
    bintrayName = 'exto'

    publishedGroupId = 'com.github.spazzze'
    libraryName = 'exto'
    artifact = 'exto'

    libraryDescription = 'Kotlin Extensions'

    siteUrl = 'https://github.com/Spazzze/exto'
    gitUrl = 'https://github.com/Spazzze/exto.git'

    developerId = 'Spaze'
    developerName = 'Elena Spaze'
    developerEmail = 'elena.space@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        libraryVersion = versionProps['VERSION_NAME'].toString() + code
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

ext.supportLibs_version = '25.3.1'
ext.rx_version = '1.2.1'

buildscript {
    ext.kotlin_version = '1.1.3-2'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    kapt {
        generateStubs = true
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "io.reactivex:rxandroid:$rx_version"
    compile "com.android.support:appcompat-v7:$supportLibs_version"
    compile "com.android.support:design:$supportLibs_version"
    compile "com.github.bumptech.glide:glide:3.7.0"
    compile 'com.jakewharton.timber:timber:4.1.2'
    compile 'org.funktionale:funktionale:0.9.7'

    kapt "com.android.databinding:compiler:2.3.3"
}

apply from: 'https://gist.githubusercontent.com/Spazzze/d57bc58910f9bd6ca75753b7e8a7c15f/raw/b0717c06981fc64457c42f002dd708676f23c7f9/installv1.gradle'
apply from: 'https://gist.githubusercontent.com/Spazzze/763828f7117e13c8ab7e00f1986c6187/raw/4acfeccb64e4a79ab6179094295a009edf4f6255/bintrayv1.gradle'

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
//    archives androidJavadocsJar
}

// gradlew bintrayUpload --stacktrace