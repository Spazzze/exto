apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

ext {
    bintrayRepo = 'general'
    bintrayName = 'exto'

    publishedGroupId = 'com.github.spazzze'
    libraryName = 'exto'
    artifact = 'exto'

    libraryDescription = 'Kotlin Extensions'

    siteUrl = 'https://github.com/Spazzze/exto'
    gitUrl = 'https://github.com/Spazzze/exto.git'

    developerId = 'Spaze'
    developerName = 'Elena Spaze'
    developerEmail = 'elena.space@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        libraryVersion = versionProps['VERSION_NAME'].toString() + code
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }
}

ext.supportLibs_version = '28.0.0'
ext.rxandroid_version = '2.1.1'
ext.rxkotlin_version = '2.4.0'
ext.glide_version = '4.3.1'
ext.timber_version = '4.7.0'
ext.funktionale_version = '1.1'
ext.retrofit_version = '2.6.1'
ext.okHttp3_version = '3.8.1'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Rx
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"

    // Retrofit
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version") { exclude module: 'okhttp' }
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    // OkHttp3
    implementation "com.squareup.okhttp3:okhttp:$okHttp3_version"

    // Support
    implementation "com.android.support:appcompat-v7:$supportLibs_version"
    implementation "com.android.support:design:$supportLibs_version"

    // Graph
    implementation "com.github.bumptech.glide:glide:$glide_version"

    // Developer Tools
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "org.funktionale:funktionale-option:$funktionale_version"
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
//    archives androidJavadocsJar
}

// gradlew bintrayUpload --stacktrace